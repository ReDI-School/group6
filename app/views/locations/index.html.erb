<p id="notice"><%= notice %></p>

<h1>Listing Locations</h1>

  <div id="map"></div>

<div class="locations" >
  <ul>
    <% @locations.each do |location| %>
    <li>
      <a href="#" onclick="javascipt:map.panTo({lat: <%= location.lat %>, lng: <%= location.long %>}); map.setZoom(16)"><%= location.name %></a> |
      <%= link_to 'Edit', edit_location_path(location) %> |
      <%= link_to 'Delete', location, method: :delete, data: { confirm: 'Are you sure?' } %>
    </li>
    <% end %>
    </ul>

  <br>

  <%= link_to 'New Location', new_location_path %>

  <script type="text/javascript">

  var map;

  function initMap() {
    var myLatLng =  new google.maps.LatLng(52.5264792,13.3480563);

    map = new google.maps.Map(document.getElementById('map'), {
      center: {lat: 52.5060713, lng: 13.3962265},
      zoom: 11 });

        <% @locations.each do |location| %>
        new google.maps.Marker({
          map: map,
          position: {lat: <%= location.lat %>, lng: <%= location.long %>},
          title: '<%= location.name %>' });
          <% end %>

              var infoWindow = new google.maps.InfoWindow({map: map});

              if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function(position) {
                  var pos = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                  };

                  infoWindow.setPosition(pos);
                  infoWindow.setContent('Your Location.');
                  map.setCenter(pos);
                },
                function() {
                  handleLocationError(true, infoWindow, map.getCenter());
                });
              }
              else {
                handleLocationError(false, infoWindow, map.getCenter());
              }


              function handleLocationError(browserHasGeolocation, infoWindow, pos) {
                infoWindow.setPosition(pos);
                infoWindow.setContent(browserHasGeolocation ?
                  'Error: The Geolocation service failed.' :
                  'Error: Your browser doesn\'t support geolocation.');

                }

                var coordInfoWindow = new google.maps.InfoWindow();
                coordInfoWindow.setContent(createInfoWindowContent(myLatLng, map.getZoom()));
                coordInfoWindow.setPosition(myLatLng);
                coordInfoWindow.open(map);
                console.log(coordInfoWindow);

                map.addListener('zoom_changed', function() {
                  coordInfoWindow.setContent(createInfoWindowContent(myLatLng, map.getZoom()));
                  coordInfoWindow.open(map);
                });

                var TILE_SIZE = 256;

                function createInfoWindowContent(latLng, zoom) {
                  var scale = 1 << zoom;

                  var worldCoordinate = project(latLng);

                  var pixelCoordinate = new google.maps.Point(
                    Math.floor(worldCoordinate.x * scale),
                    Math.floor(worldCoordinate.y * scale));

                    var tileCoordinate = new google.maps.Point(
                      Math.floor(worldCoordinate.x * scale / TILE_SIZE),
                      Math.floor(worldCoordinate.y * scale / TILE_SIZE));
                      return [
                        'berlin',
                        'LatLng: ' + latLng,
                        'Zoom level: ' + zoom,
                        'World Coordinate: ' + worldCoordinate,
                        'Pixel Coordinate: ' + pixelCoordinate,
                        'Tile Coordinate: ' + tileCoordinate
                      ].join('<br>');
                    }

                    // The mapping between latitude, longitude and pixels is defined by the web
                    // mercator projection.
                    function project(latLng) {
                      var siny = Math.sin(latLng.lat() * Math.PI / 180);

                      // Truncating to 0.9999 effectively limits latitude to 89.189. This is
                      // about a third of a tile past the edge of the world tile.
                      siny = Math.min(Math.max(siny, -0.9999), 0.9999);

                      return new google.maps.Point(
                        TILE_SIZE * (0.5 + latLng.lng() / 360),
                        TILE_SIZE * (0.5 - Math.log((1 + siny) / (1 - siny)) / (4 * Math.PI)));

                      }
                    }
                    </script>

                    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC_viYAPxX0PcTdcTS6ep58Ot9ZtgYsqNU&callback=initMap"
                    async defer></script>
